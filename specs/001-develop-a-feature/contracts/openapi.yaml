openapi: 3.0.3
info:
  title: Ambient Agentic Runner - OpenShift Multi-Tenant API
  description: Simplified REST API for session management in OpenShift projects
  version: 1.0.0-alpha1
  contact:
    name: vTeam Platform
    email: platform@ambient-code.io

servers:
  - url: https://api.ambient-code.io/v2
    description: Production API
  - url: http://localhost:8080/v2
    description: Development API

security:
  - OpenShiftOAuth: []
  - BotToken: []

components:
  securitySchemes:
    OpenShiftOAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://oauth-openshift.apps.cluster.example.com/oauth/authorize
          tokenUrl: https://oauth-openshift.apps.cluster.example.com/oauth/token
          scopes:
            read: Read access to resources
            write: Write access to resources
            admin: Administrative access
    BotToken:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AgenticSession:
      type: object
      required:
        - metadata
        - spec
      properties:
        apiVersion:
          type: string
          example: "vteam.ambient-code/v1alpha1"
        kind:
          type: string
          example: "AgenticSession"
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        spec:
          $ref: '#/components/schemas/AgenticSessionSpec'
        status:
          $ref: '#/components/schemas/AgenticSessionStatus'

    AgenticSessionSpec:
      type: object
      required:
        - prompt
        - websiteURL
        - displayName
        - userContext
      properties:
        prompt:
          type: string
          example: "Analyze the user experience of this platform"
          maxLength: 5000
        websiteURL:
          type: string
          format: uri
          example: "https://example.com"
        displayName:
          type: string
          example: "Platform UX Analysis"
          maxLength: 100
        llmSettings:
          $ref: '#/components/schemas/LLMSettings'
        timeout:
          type: integer
          minimum: 30
          maximum: 3600
          example: 300
        userContext:
          $ref: '#/components/schemas/UserContext'
        botAccount:
          $ref: '#/components/schemas/BotAccountRef'
        resourceOverrides:
          $ref: '#/components/schemas/ResourceOverrides'

    UserContext:
      type: object
      required:
        - userId
        - displayName
        - groups
      properties:
        userId:
          type: string
          example: "john.doe@company.com"
        displayName:
          type: string
          example: "John Doe"
        groups:
          type: array
          items:
            type: string
          example: ["ml-researchers", "company-employees"]

    BotAccountRef:
      type: object
      required:
        - serviceAccountName
        - automated
      properties:
        serviceAccountName:
          type: string
          example: "jira-integration-bot"
        automated:
          type: boolean
          example: true
          description: "Indicates session created by bot"

    ResourceOverrides:
      type: object
      properties:
        maxDurationMinutes:
          type: integer
          minimum: 5
          maximum: 1440
        priorityClass:
          type: string
          enum: ["low", "normal", "high", "critical"]

    LLMSettings:
      type: object
      properties:
        model:
          type: string
          example: "claude-3-5-sonnet-20241022"
        temperature:
          type: number
          minimum: 0
          maximum: 2
          example: 0.7
        maxTokens:
          type: integer
          minimum: 100
          maximum: 100000
          example: 4000

    AgenticSessionStatus:
      type: object
      properties:
        phase:
          type: string
          enum: ["Pending", "Creating", "Running", "Completed", "Failed", "Stopped", "Error"]
        message:
          type: string
        startTime:
          type: string
          format: date-time
        completionTime:
          type: string
          format: date-time
        jobName:
          type: string
        finalOutput:
          type: string
        cost:
          type: number
          format: float
        tokenUsage:
          $ref: '#/components/schemas/TokenUsage'
        createdBy:
          type: string
        lastModifiedBy:
          type: string
        lastModifiedAt:
          type: string
          format: date-time

    TokenUsage:
      type: object
      properties:
        inputTokens:
          type: integer
        outputTokens:
          type: integer

    ObjectMeta:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
          maxLength: 63
        namespace:
          type: string
          pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
          maxLength: 63
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string
        creationTimestamp:
          type: string
          format: date-time
        resourceVersion:
          type: string
        uid:
          type: string

    ProjectSettings:
      type: object
      required:
        - metadata
        - spec
      properties:
        apiVersion:
          type: string
          example: "vteam.ambient-code/v1alpha1"
        kind:
          type: string
          example: "ProjectSettings"
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        spec:
          $ref: '#/components/schemas/ProjectSettingsSpec'
        status:
          $ref: '#/components/schemas/ProjectSettingsStatus'

    ProjectSettingsSpec:
      type: object
      required:
        - displayName
        - availableResources
        - defaults
        - constraints
      properties:
        displayName:
          type: string
          example: "ML Research Team"
        description:
          type: string
          example: "Machine learning research and experiments"
        bots:
          type: array
          items:
            $ref: '#/components/schemas/BotConfig'
        groupAccess:
          type: array
          items:
            $ref: '#/components/schemas/GroupAccess'
        availableResources:
          $ref: '#/components/schemas/AvailableResources'
        defaults:
          $ref: '#/components/schemas/ProjectDefaults'
        constraints:
          $ref: '#/components/schemas/ProjectConstraints'

    BotConfig:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: "jira-integration-bot"
        description:
          type: string
          example: "Jira webhook integration"

    GroupAccess:
      type: object
      required:
        - groupName
        - role
      properties:
        groupName:
          type: string
          example: "ml-researchers"
        role:
          type: string
          enum: ["admin", "edit", "view"]

    AvailableResources:
      type: object
      required:
        - models
        - resourceLimits
      properties:
        models:
          type: array
          items:
            $ref: '#/components/schemas/ModelConfig'
        resourceLimits:
          $ref: '#/components/schemas/ProjectResourceLimits'
        priorityClasses:
          type: array
          items:
            type: string
          example: ["low", "normal", "high"]
        integrations:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationConfig'

    ModelConfig:
      type: object
      required:
        - name
        - displayName
        - costPerToken
        - maxTokens
        - default
      properties:
        name:
          type: string
          example: "claude-3-5-sonnet-20241022"
        displayName:
          type: string
          example: "Claude 3.5 Sonnet"
        costPerToken:
          type: number
          format: float
          example: 0.00001
        maxTokens:
          type: integer
          example: 200000
        default:
          type: boolean
          example: true

    ProjectResourceLimits:
      type: object
      properties:
        cpu:
          type: string
          example: "2000m"
        memory:
          type: string
          example: "4Gi"
        storage:
          type: string
          example: "10Gi"
        maxDurationMinutes:
          type: integer
          example: 120

    IntegrationConfig:
      type: object
      required:
        - type
        - enabled
      properties:
        type:
          type: string
          example: "browser"
        enabled:
          type: boolean
          example: true

    ProjectDefaults:
      type: object
      properties:
        model:
          type: string
          example: "claude-3-5-sonnet-20241022"
        temperature:
          type: number
          example: 0.7
        maxTokens:
          type: integer
          example: 4000
        timeout:
          type: integer
          example: 300
        priorityClass:
          type: string
          example: "normal"

    ProjectConstraints:
      type: object
      properties:
        maxConcurrentSessions:
          type: integer
          example: 10
        maxSessionsPerUser:
          type: integer
          example: 3
        maxCostPerSession:
          type: number
          format: float
          example: 50.0
        maxCostPerUserPerDay:
          type: number
          format: float
          example: 200.0
        allowSessionCloning:
          type: boolean
          example: true
        allowBotAccounts:
          type: boolean
          example: true

    ProjectSettingsStatus:
      type: object
      properties:
        phase:
          type: string
          enum: ["Active", "Pending", "Error"]
        botsCreated:
          type: integer
        groupBindingsCreated:
          type: integer
        lastReconciled:
          type: string
          format: date-time
        currentUsage:
          $ref: '#/components/schemas/ProjectUsage'
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/StatusCondition'

    ProjectUsage:
      type: object
      properties:
        activeSessions:
          type: integer
        totalCostToday:
          type: number
          format: float

    StatusCondition:
      type: object
      required:
        - type
        - status
        - reason
        - message
      properties:
        type:
          type: string
          example: "BotsReady"
        status:
          type: string
          enum: ["True", "False", "Unknown"]
        reason:
          type: string
          example: "ServiceAccountsCreated"
        message:
          type: string
          example: "All bot ServiceAccounts created successfully"

    AmbientProject:
      type: object
      required:
        - name
        - displayName
        - labels
        - annotations
      properties:
        name:
          type: string
          example: "ml-research-team"
        displayName:
          type: string
          example: "ML Research Team"
        description:
          type: string
          example: "Machine learning research and experiments"
        labels:
          type: object
          additionalProperties:
            type: string
          example:
            ambient-code.io/managed: "true"
        annotations:
          type: object
          additionalProperties:
            type: string
          example:
            ambient-code.io/project-type: "research"
            ambient-code.io/created-by: "ui"
        creationTimestamp:
          type: string
          format: date-time
        status:
          type: string
          enum: ["Active", "Terminating"]
        resourceQuota:
          $ref: '#/components/schemas/ResourceQuotaInfo'

    CreateProjectRequest:
      type: object
      required:
        - name
        - displayName
      properties:
        name:
          type: string
          pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
          maxLength: 63
          example: "ml-research-team"
        displayName:
          type: string
          maxLength: 100
          example: "ML Research Team"
        description:
          type: string
          maxLength: 500
          example: "Machine learning research and experiments"
        projectType:
          type: string
          enum: ["research", "production", "demo", "testing"]
          example: "research"
        resourceQuota:
          $ref: '#/components/schemas/ResourceQuotaRequest'

    ResourceQuotaInfo:
      type: object
      properties:
        cpu:
          type: string
          example: "8"
        memory:
          type: string
          example: "16Gi"
        persistentvolumeclaims:
          type: string
          example: "10"

    ResourceQuotaRequest:
      type: object
      properties:
        cpu:
          type: string
          example: "8"
        memory:
          type: string
          example: "16Gi"
        persistentvolumeclaims:
          type: string
          example: "10"

    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          example: "ValidationError"
        message:
          type: string
          example: "Session name must be unique within project"
        details:
          type: object
        timestamp:
          type: string
          format: date-time

paths:
  # Session Management - Project context via X-OpenShift-Project header
  /sessions:
    get:
      summary: List sessions in current OpenShift project
      security:
        - OpenShiftOAuth: [read]
        - BotToken: []
      parameters:
        - name: X-OpenShift-Project
          in: header
          required: true
          schema:
            type: string
          description: "OpenShift project namespace"
        - name: status
          in: query
          schema:
            type: string
            enum: ["Pending", "Running", "Completed", "Failed"]
        - name: createdBy
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of sessions
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgenticSession'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient project permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new session in OpenShift project
      security:
        - OpenShiftOAuth: [write]
        - BotToken: []
      parameters:
        - name: X-OpenShift-Project
          in: header
          required: true
          schema:
            type: string
          description: "OpenShift project namespace"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgenticSession'
      responses:
        '201':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgenticSession'
        '400':
          description: Invalid session specification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient project permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sessions/{sessionName}:
    get:
      summary: Get a specific session
      security:
        - OpenShiftOAuth: [read]
        - BotToken: []
      parameters:
        - name: X-OpenShift-Project
          in: header
          required: true
          schema:
            type: string
          description: "OpenShift project namespace"
        - name: sessionName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgenticSession'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update a session
      security:
        - OpenShiftOAuth: [write]
      parameters:
        - name: X-OpenShift-Project
          in: header
          required: true
          schema:
            type: string
        - name: sessionName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgenticSession'
      responses:
        '200':
          description: Session updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgenticSession'
        '400':
          description: Invalid session specification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a session
      security:
        - OpenShiftOAuth: [write]
      parameters:
        - name: X-OpenShift-Project
          in: header
          required: true
          schema:
            type: string
        - name: sessionName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Session deleted successfully
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sessions/{sessionName}/clone:
    post:
      summary: Clone a session to another OpenShift project
      security:
        - OpenShiftOAuth: [write]
      parameters:
        - name: X-OpenShift-Project
          in: header
          required: true
          schema:
            type: string
          description: "Source OpenShift project namespace"
        - name: sessionName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - targetProject
                - newSessionName
              properties:
                targetProject:
                  type: string
                  description: "Target OpenShift project namespace"
                newSessionName:
                  type: string
      responses:
        '201':
          description: Session cloned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgenticSession'
        '403':
          description: Insufficient permissions to source or target project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sessions/{sessionName}/start:
    post:
      summary: Start a session execution
      security:
        - OpenShiftOAuth: [write]
        - BotToken: []
      parameters:
        - name: X-OpenShift-Project
          in: header
          required: true
          schema:
            type: string
        - name: sessionName
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Session start initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgenticSession'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sessions/{sessionName}/stop:
    post:
      summary: Stop a running session
      security:
        - OpenShiftOAuth: [write]
      parameters:
        - name: X-OpenShift-Project
          in: header
          required: true
          schema:
            type: string
        - name: sessionName
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Session stop initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgenticSession'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Webhook Endpoints - bypass OAuth proxy
  /webhooks/jira:
    post:
      summary: Jira webhook endpoint for automated session creation
      security:
        - BotToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Jira webhook payload (varies by event type)
              properties:
                webhookEvent:
                  type: string
                  example: "jira:issue_created"
                issue:
                  type: object
                user:
                  type: object
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionCreated:
                    type: boolean
                  sessionName:
                    type: string
                  projectName:
                    type: string
        '400':
          description: Invalid webhook payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid or missing bot token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Health and Status
  /health:
    get:
      summary: Health check endpoint
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "1.0.0-alpha1"

  /metrics:
    get:
      summary: Prometheus metrics endpoint
      responses:
        '200':
          description: Metrics in Prometheus format
          content:
            text/plain:
              schema:
                type: string
                example: |
                  # HELP agenticsession_total Total number of agentic sessions
                  # TYPE agenticsession_total counter
                  agenticsession_total 42

  # Ambient Project Management
  /projects:
    get:
      summary: List Ambient-managed projects accessible to user
      security:
        - OpenShiftOAuth: [read]
      responses:
        '200':
          description: List of Ambient projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/AmbientProject'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new Ambient project (creates OpenShift project + labels)
      security:
        - OpenShiftOAuth: [admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmbientProject'
        '400':
          description: Invalid project specification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions to create projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /projects/{projectName}:
    get:
      summary: Get specific Ambient project details
      security:
        - OpenShiftOAuth: [read]
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmbientProject'
        '404':
          description: Project not found or not an Ambient project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient project permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete Ambient project (admin only)
      security:
        - OpenShiftOAuth: [admin]
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Project deleted successfully
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Project Settings Management
  /projects/{projectName}/settings:
    get:
      summary: Get project settings
      security:
        - OpenShiftOAuth: [read]
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
          description: "OpenShift project namespace"
      responses:
        '200':
          description: Project settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettings'
        '404':
          description: Project or settings not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient project permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update project settings (admin only)
      security:
        - OpenShiftOAuth: [admin]
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectSettings'
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettings'
        '400':
          description: Invalid settings specification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /projects/{projectName}/bots:
    get:
      summary: List project bots
      security:
        - OpenShiftOAuth: [read]
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of bot configurations
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/BotConfig'
        '403':
          description: Insufficient project permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new bot in project (admin only)
      security:
        - OpenShiftOAuth: [admin]
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotConfig'
      responses:
        '201':
          description: Bot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotConfig'
        '400':
          description: Invalid bot configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /projects/{projectName}/bots/{botName}:
    delete:
      summary: Delete a bot from project (admin only)
      security:
        - OpenShiftOAuth: [admin]
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: botName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Bot deleted successfully
        '404':
          description: Bot not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /projects/{projectName}/groups:
    get:
      summary: List project group access
      security:
        - OpenShiftOAuth: [read]
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of group access configurations
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupAccess'
        '403':
          description: Insufficient project permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Grant group access to project (admin only)
      security:
        - OpenShiftOAuth: [admin]
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupAccess'
      responses:
        '201':
          description: Group access granted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupAccess'
        '400':
          description: Invalid group access configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /projects/{projectName}/groups/{groupName}:
    delete:
      summary: Revoke group access from project (admin only)
      security:
        - OpenShiftOAuth: [admin]
      parameters:
        - name: projectName
          in: path
          required: true
          schema:
            type: string
        - name: groupName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Group access revoked successfully
        '404':
          description: Group access not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'