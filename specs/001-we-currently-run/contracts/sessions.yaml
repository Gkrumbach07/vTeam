openapi: 3.0.3
info:
  title: Sessions API
  description: Session management with namespace-scoped RBAC
  version: 1.0.0

servers:
  - url: https://ambient-platform.example.com/api/v1
    description: Production API server

paths:
  /namespaces/{namespace}/sessions:
    get:
      summary: List sessions in namespace
      description: |
        Returns sessions visible to the authenticated user in the specified namespace.
        Results are filtered based on RBAC permissions.
      operationId: listSessions
      parameters:
        - name: namespace
          in: path
          required: true
          description: Kubernetes namespace
          schema:
            type: string
            pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
        - name: status
          in: query
          description: Filter by session status
          schema:
            type: string
            enum: [pending, running, completed, failed]
        - name: limit
          in: query
          description: Maximum number of results
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of sessions
          content:
            application/json:
              schema:
                type: object
                required:
                  - sessions
                  - total
                properties:
                  sessions:
                    type: array
                    items:
                      $ref: '#/components/schemas/SessionSummary'
                  total:
                    type: integer
                    description: Total number of sessions (before pagination)
                  hasMore:
                    type: boolean
                    description: Whether more results are available
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      summary: Create new session
      description: |
        Creates a new agentic session in the specified namespace.
        User must have editor permissions in the namespace.
      operationId: createSession
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreateRequest'
      responses:
        '201':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'

  /namespaces/{namespace}/sessions/{sessionId}:
    get:
      summary: Get session details
      description: |
        Returns detailed information about a specific session,
        including history and artifacts.
      operationId: getSession
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: sessionId
          in: path
          required: true
          description: Session UUID
          schema:
            type: string
            format: uuid
        - name: includeHistory
          in: query
          description: Include session history in response
          schema:
            type: boolean
            default: true
        - name: includeArtifacts
          in: query
          description: Include artifact metadata in response
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Session details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionDetail'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /namespaces/{namespace}/sessions/{sessionId}/artifacts:
    get:
      summary: List session artifacts
      description: |
        Returns artifacts generated by the session with download URLs.
      operationId: listSessionArtifacts
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of artifacts
          content:
            application/json:
              schema:
                type: object
                properties:
                  artifacts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Artifact'

  /user/namespaces:
    get:
      summary: List user's accessible namespaces
      description: |
        Returns namespaces the authenticated user can access,
        with their permission level.
      operationId: listUserNamespaces
      responses:
        '200':
          description: List of accessible namespaces
          content:
            application/json:
              schema:
                type: object
                properties:
                  namespaces:
                    type: array
                    items:
                      $ref: '#/components/schemas/NamespaceAccess'

components:
  schemas:
    SessionSummary:
      type: object
      required:
        - id
        - namespace
        - status
        - framework
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        namespace:
          type: string
        status:
          type: string
          enum: [pending, running, completed, failed]
        framework:
          type: string
          example: "claude-code"
        trigger:
          type: object
          properties:
            source:
              type: string
              example: "github"
            event:
              type: string
              example: "pull_request"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        artifactCount:
          type: integer
          description: Number of artifacts generated

    SessionDetail:
      allOf:
        - $ref: '#/components/schemas/SessionSummary'
        - type: object
          properties:
            spec:
              $ref: '#/components/schemas/SessionSpec'
            history:
              type: array
              items:
                $ref: '#/components/schemas/HistoryEntry'
            artifacts:
              type: array
              items:
                $ref: '#/components/schemas/Artifact'
            workload:
              type: object
              properties:
                podName:
                  type: string
                jobName:
                  type: string
                resources:
                  type: object

    SessionSpec:
      type: object
      required:
        - framework
      properties:
        trigger:
          type: object
          properties:
            source:
              type: string
            event:
              type: string
            payload:
              type: object
        framework:
          type: object
          required:
            - type
          properties:
            type:
              type: string
              example: "claude-code"
            version:
              type: string
              example: "1.0"
            config:
              type: object
        policy:
          type: object
          properties:
            modelConstraints:
              type: object
            toolConstraints:
              type: object
            approvalRequired:
              type: boolean

    SessionCreateRequest:
      type: object
      required:
        - framework
      properties:
        framework:
          type: object
          required:
            - type
          properties:
            type:
              type: string
              example: "claude-code"
            config:
              type: object
              description: Framework-specific configuration
        trigger:
          type: object
          properties:
            source:
              type: string
              example: "manual"
            description:
              type: string
              example: "Manual session creation from UI"
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata for the session

    HistoryEntry:
      type: object
      required:
        - timestamp
        - event
      properties:
        timestamp:
          type: string
          format: date-time
        event:
          type: string
          example: "SessionCreated"
        data:
          type: object
          description: Event-specific data
        actor:
          type: string
          description: User or service that triggered the event

    Artifact:
      type: object
      required:
        - type
        - location
        - createdAt
      properties:
        type:
          type: string
          enum: [log, output, intermediate, error]
        location:
          type: string
          description: Storage location reference
        downloadUrl:
          type: string
          format: uri
          description: Presigned URL for artifact download
        size:
          type: integer
          format: int64
          description: Artifact size in bytes
        contentType:
          type: string
          example: "application/json"
        createdAt:
          type: string
          format: date-time
        metadata:
          type: object
          description: Framework-specific metadata

    NamespaceAccess:
      type: object
      required:
        - namespace
        - permission
      properties:
        namespace:
          type: string
        permission:
          type: string
          enum: [viewer, editor]
        policy:
          type: object
          description: Summary of namespace policy

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
        traceId:
          type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "insufficient_permissions"
            message: "User does not have access to this namespace"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "not_found"
            message: "Session not found or not accessible"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []